<style>
        /* Container isolation to prevent style conflicts */
        .book-cards-widget {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: #f8fafc;
            padding: 20px;
            border-radius: 12px;
            max-width: 1200px;
            margin: 0 auto;
            box-sizing: border-box;
            color: #1e293b;
            line-height: 1.6;
        }

        .book-cards-widget * {
            box-sizing: border-box;
        }

        .book-cards-widget h1 {
            text-align: center;
            color: #1e293b;
            margin-bottom: 30px;
            font-size: clamp(1.5rem, 4vw, 2.5rem);
            font-weight: 700;
        }

        .collection-info {
            text-align: center;
            margin-bottom: 20px;
            color: #64748b;
            font-size: 16px;
        }

        .sorting-controls {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            gap: 15px;
            margin-bottom: 30px;
            padding: 20px;
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .sort-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .sort-label {
            font-size: 14px;
            font-weight: 600;
            color: #374151;
            white-space: nowrap;
        }

        .sort-select {
            padding: 8px 12px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            background: white;
            font-size: 14px;
            color: #374151;
            cursor: pointer;
            transition: all 0.2s ease;
            min-width: 120px;
        }

        .sort-select:hover {
            border-color: #9ca3af;
        }

        .sort-select:focus {
            outline: 3px solid #fbbf24;
            outline-offset: 2px;
            border-color: #6366f1;
        }

        .sort-order-btn {
            padding: 8px 12px;
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            white-space: nowrap;
            box-shadow: 0 2px 6px rgba(99, 102, 241, 0.3);
        }

        .sort-order-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4);
        }

        .sort-order-btn:focus {
            outline: 3px solid #fbbf24;
            outline-offset: 2px;
        }

        .sort-order-btn.desc {
            background: linear-gradient(135deg, #ef4444 0%, #f97316 100%);
            box-shadow: 0 2px 6px rgba(239, 68, 68, 0.3);
        }

        .sort-order-btn.desc:hover {
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
        }

        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 10px;
        }

        .flip-card {
            background-color: transparent;
            width: 100%;
            height: 450px;
            perspective: 1000px;
            border-radius: 12px;
        }

        .flip-card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            text-align: center;
            transition: transform 0.6s ease-in-out;
            transform-style: preserve-3d;
            cursor: pointer;
            border-radius: 12px;
        }

        .flip-card.flipped .flip-card-inner {
            transform: rotateY(180deg);
        }

        .flip-card-front, .flip-card-back {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
            overflow: hidden;
        }

        .flip-card-front {
            background: linear-gradient(135deg, #f0f9ff 0%, #e0e7ff 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .flip-card-back {
            background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
            transform: rotateY(180deg);
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            text-align: left;
        }

        .book-cover {
            max-width: 90%;
            max-height: 90%;
            object-fit: contain;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .cover-placeholder {
            width: 200px;
            height: 300px;
            background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e0 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            color: #64748b;
            font-size: 14px;
            text-align: center;
            padding: 20px;
        }

        .flip-instruction {
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 6px 12px;
            border-radius: 15px;
            font-size: 12px;
            opacity: 0.8;
        }

        .book-info {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .book-title {
            font-size: 18px;
            font-weight: 700;
            color: #1e293b;
            line-height: 1.3;
            margin-bottom: 8px;
        }

        .book-author {
            font-size: 16px;
            color: #475569;
            font-weight: 500;
        }

        .book-course {
            font-size: 16px;
            color: #059669;
            font-weight: 600;
            background: #ecfdf5;
            padding: 4px 8px;
            border-radius: 6px;
            display: inline-block;
            margin-bottom: 4px;
        }

        .book-publisher {
            font-size: 14px;
            color: #64748b;
            line-height: 1.4;
        }

        .book-date {
            font-size: 14px;
            color: #64748b;
            font-weight: 500;
        }

        .book-description {
            font-size: 13px;
            color: #64748b;
            line-height: 1.4;
            flex-grow: 1;
            margin: 8px 0;
        }

        .book-link {
            display: inline-block;
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            text-decoration: none;
            padding: 10px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-top: 12px;
            text-align: center;
            align-self: flex-start;
        }

        .book-link:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        .book-link:focus {
            outline: 3px solid #fbbf24;
            outline-offset: 2px;
        }

        .loading {
            text-align: center;
            padding: 40px;
            font-size: 16px;
            color: #64748b;
            grid-column: 1 / -1;
        }

        .error {
            text-align: center;
            padding: 40px;
            font-size: 16px;
            color: #dc2626;
            grid-column: 1 / -1;
            background: #fef2f2;
            border-radius: 8px;
            border: 1px solid #fecaca;
        }

        .flip-card.keyboard-focused {
            outline: 3px solid #fbbf24;
            outline-offset: 2px;
        }

        .flip-card:focus {
            outline: 3px solid #fbbf24;
            outline-offset: 2px;
        }

        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }

        .refresh-notice {
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            background: #f0f9ff;
            border-radius: 8px;
            color: #1e40af;
            font-size: 14px;
            border: 1px solid #dbeafe;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .book-cards-widget {
                padding: 15px;
            }

            .sorting-controls {
                flex-direction: column;
                gap: 15px;
                padding: 15px;
            }

            .sort-group {
                flex-direction: column;
                text-align: center;
                gap: 8px;
            }

            .sort-select {
                min-width: 200px;
            }

            .cards-grid {
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 15px;
            }

            .flip-card {
                height: 400px;
            }

            .flip-card-back {
                padding: 15px;
            }

            .book-title {
                font-size: 16px;
            }
        }

        @media (max-width: 480px) {
            .cards-grid {
                grid-template-columns: 1fr;
                gap: 15px;
                padding: 0 5px;
            }

            .flip-card {
                height: 370px;
            }

            .book-title {
                font-size: 15px;
            }

            .book-author, .book-publisher, .book-date {
                font-size: 13px;
            }

            .cover-placeholder {
                width: 150px;
                height: 225px;
            }
        }

        /* High contrast mode support */
        @media (prefers-contrast: high) {
            .book-cards-widget {
                background: white;
                border: 2px solid black;
            }

            .flip-card-front, .flip-card-back {
                border: 2px solid black;
            }
        }

        /* Reduced motion support */
        @media (prefers-reduced-motion: reduce) {
            .flip-card-inner {
                transition: none;
            }

            .book-link:hover {
                transform: none;
            }
        }
    </style>
<div class="book-cards-widget">
        <h1>Current Reserves Collection - Spring 2025</h1>
        
        <div class="collection-info">
            <span id="collectionCount">Loading collection...</span>
        </div>

        <!-- Search Section -->
        <div class="search-section" role="region" aria-label="Search controls" style="margin-bottom: 20px;">
            <div style="display: flex; flex-wrap: wrap; justify-content: center; align-items: center; gap: 15px; padding: 20px; background: #ffffff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">
                <div style="display: flex; align-items: center; gap: 8px; flex: 1; min-width: 250px;">
                    <label for="searchInput" style="font-size: 14px; font-weight: 600; color: #374151; white-space: nowrap;">Search:</label>
                    <input type="text" 
                           id="searchInput" 
                           class="search-input" 
                           placeholder="Search titles, authors, courses..." 
                           onkeyup="handleSearch()"
                           style="flex: 1; padding: 8px 12px; border: 2px solid #e5e7eb; border-radius: 8px; background: white; font-size: 14px; color: #374151; transition: all 0.2s ease;"
                           onfocus="this.style.borderColor='#6366f1'; this.style.outline='3px solid #fbbf24'; this.style.outlineOffset='2px';"
                           onblur="this.style.borderColor='#e5e7eb'; this.style.outline='none';"
                           aria-label="Search through book collection by title, author, course, or other details">
                </div>
                <button id="clearSearchBtn" 
                        onclick="clearSearch()" 
                        style="padding: 8px 12px; background: #6b7280; color: white; border: none; border-radius: 8px; font-size: 14px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; white-space: nowrap; opacity: 0.6; pointer-events: none;"
                        onmouseover="if(!this.disabled) this.style.background='#4b5563'"
                        onmouseout="if(!this.disabled) this.style.background='#6b7280'"
                        disabled
                        aria-label="Clear search and show all books">
                    Clear Search
                </button>
            </div>
        </div>

        <div class="sorting-controls" role="region" aria-label="Sort and filter controls">
            <div class="sort-group">
                <label for="sortBy" class="sort-label">Sort by:</label>
                <select id="sortBy" class="sort-select" onchange="applySorting()" aria-label="Choose sorting criteria">
                    <option value="title">Title</option>
                    <option value="author">Author</option>
                    <option value="course">Course</option>
                    <option value="date">Publication Date</option>
                </select>
            </div>
            
            <div class="sort-group">
                <span class="sort-label">Order:</span>
                <button id="sortOrderBtn" class="sort-order-btn" onclick="toggleSortOrder()" 
                        aria-label="Toggle sort order between ascending and descending">
                    A → Z
                </button>
            </div>
        </div>

        <div id="cardsContainer" class="cards-grid" role="region" aria-label="Complete reserves collection">
            <div class="loading">Loading reserves...</div>
        </div>

        <div class="refresh-notice">
            Collection updates automatically when new titles are added to the reserves database.
            Refresh the page to see the latest additions.
        </div>
    </div>
<script>
// ===== DISPLAY CONFIGURATION =====
// Set these to true/false to control what displays on the back of cards
const DISPLAY_CONFIG = {
    showDate: false,           // Set to false to hide publication dates
    showDescription: false,    // Set to false to hide descriptions
    showPublisher: true,       // Set to false to hide publisher info
    showCourse: true,          // Set to false to hide course info
    showAuthor: true           // Set to false to hide author info
};

// Configuration - Updated data sources with better CORS handling
const JSON_DATA_URL = 'https://raw.githubusercontent.com/ClarkLibraries/Marketing/refs/heads/main/Library/CurrentReservesSpring2025.json';

let bookData = [];
let filteredBookData = [];
let isLoading = false;
let currentSortBy = 'title';
let currentSortOrder = 'asc'; // 'asc' or 'desc'
let renderTimeout;
let resizeTimeout;
let searchTimeout;
let currentSearchTerm = '';

// Debounced render function
const debouncedRender = (() => {
    let timeoutId;
    return (delay = 100) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            displayBooks();
        }, delay);
    };
})();

// Debounced search function
const debouncedSearch = (() => {
    let timeoutId;
    return (delay = 300) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            performSearch();
        }, delay);
    };
})();

// Search functionality
function handleSearch() {
    const searchInput = document.getElementById('searchInput');
    if (!searchInput) return;
    
    currentSearchTerm = searchInput.value.trim();
    updateClearButton();
    debouncedSearch();
}

function performSearch() {
    if (!currentSearchTerm) {
        filteredBookData = [...bookData];
    } else {
        const searchLower = currentSearchTerm.toLowerCase();
        filteredBookData = bookData.filter(book => {
            // Search across all text fields
            const searchableText = [
                book.title || '',
                book.author || '',
                book.course || '',
                book.publisher || '',
                book.date || '',
                book.description || ''
            ].join(' ').toLowerCase();
            
            return searchableText.includes(searchLower);
        });
    }
    
    displayBooks();
    updateCollectionInfo();
    
    // Announce search results
    const resultCount = filteredBookData.length;
    const searchDesc = currentSearchTerm ? ` matching "${currentSearchTerm}"` : '';
    announceToScreenReader(`${resultCount} book${resultCount !== 1 ? 's' : ''} found${searchDesc}`);
}

function clearSearch() {
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.value = '';
        currentSearchTerm = '';
        searchInput.focus();
    }
    
    filteredBookData = [...bookData];
    updateClearButton();
    displayBooks();
    updateCollectionInfo();
    
    announceToScreenReader('Search cleared, showing all books');
}

function updateClearButton() {
    const clearBtn = document.getElementById('clearSearchBtn');
    if (!clearBtn) return;
    
    const hasSearch = currentSearchTerm.length > 0;
    clearBtn.disabled = !hasSearch;
    clearBtn.style.opacity = hasSearch ? '1' : '0.6';
    clearBtn.style.pointerEvents = hasSearch ? 'auto' : 'none';
    clearBtn.style.background = hasSearch ? '#6b7280' : '#9ca3af';
}

// Fetch book data from GitHub
async function loadBookData() {
    if (isLoading) return;
    isLoading = true;
    
    try {
        showLoading('Loading complete reserves collection...');
        
        const response = await fetch(JSON_DATA_URL);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        // Handle different JSON structures
        if (Array.isArray(data)) {
            bookData = data;
        } else if (data.books && Array.isArray(data.books)) {
            bookData = data.books;
        } else {
            throw new Error('Invalid JSON structure - expected an array of books');
        }
        
        if (bookData.length === 0) {
            throw new Error('No book data found');
        }
        
        // Initialize filtered data
        filteredBookData = [...bookData];
        
        console.log(`Loaded ${bookData.length} reserves from GitHub`);
        displayBooks();
        updateCollectionInfo();
        
    } catch (error) {
        console.error('Error loading book data:', error);
        showError(`Failed to load reserves data: ${error.message}`);
    } finally {
        isLoading = false;
    }
}

function showLoading(message = 'Loading...') {
    const container = document.getElementById('cardsContainer');
    container.innerHTML = `<div class="loading" role="status" aria-live="polite">${message}</div>`;
}

function showError(message) {
    const container = document.getElementById('cardsContainer');
    container.innerHTML = `
        <div class="error" role="alert">
            <strong>Error:</strong> ${message}<br>
            <button onclick="loadBookData()" style="margin-top: 10px; padding: 8px 16px; background: #dc2626; color: white; border: none; border-radius: 4px; cursor: pointer;">
                Try Again
            </button>
        </div>
    `;
}

function updateCollectionInfo() {
    const countElement = document.getElementById('collectionCount');
    if (filteredBookData.length > 0) {
        const sortDesc = getSortDescription();
        const searchDesc = currentSearchTerm ? ` (filtered from ${bookData.length} total)` : '';
        countElement.textContent = `Displaying ${filteredBookData.length} titles${searchDesc}, sorted ${sortDesc}`;
        countElement.setAttribute('aria-live', 'polite');
    } else if (currentSearchTerm) {
        countElement.textContent = `No titles found matching "${currentSearchTerm}"`;
    } else {
        countElement.textContent = 'No titles available';
    }
}

// Updated card creation with configurable elements
function createCard(book, index) {
    const cardId = `card-${index}`;
    const title = sanitizeText(book.title || 'Untitled');
    const author = sanitizeText(book.author || '');
    const course = sanitizeText(book.course || '');
    const publisher = sanitizeText(book.publisher || '');
    const date = sanitizeText(book.date || 'Date unknown');
    const description = sanitizeText(book.description || '');
    const permalink = book.permalink || '#';
    const coverImage = book.coverImage || '';
    
    const titleId = `title-${index}`;
    const flipButtonId = `flip-btn-${index}`;
    const backFlipButtonId = `back-flip-btn-${index}`;
    const catalogLinkId = `catalog-link-${index}`;
    const coverAlt = `Book cover for ${title}${author ? ' by ' + author : ''}`;
    
    // Build the book info section based on configuration
    let bookInfoHTML = `<h3 class="book-title" id="${titleId}">${title}</h3>`;
    
    if (DISPLAY_CONFIG.showAuthor && author) {
        bookInfoHTML += `<div class="book-author">by ${author}</div>`;
    }
    
    if (DISPLAY_CONFIG.showCourse && course) {
        bookInfoHTML += `<div class="book-course">${course}</div>`;
    }
    
    if (DISPLAY_CONFIG.showPublisher && publisher) {
        bookInfoHTML += `<div class="book-publisher">Publisher: ${publisher}</div>`;
    }
    
    if (DISPLAY_CONFIG.showDate) {
        bookInfoHTML += `<div class="book-date">Published: ${date}</div>`;
    }
    
    if (DISPLAY_CONFIG.showDescription && description) {
        bookInfoHTML += `<div class="book-description">${description}</div>`;
    }
    
    return `
        <article class="flip-card" 
                 role="article" 
                 aria-labelledby="${titleId}"
                 data-title="${title.toLowerCase()}"
                 data-author="${author.toLowerCase()}"
                 data-course="${course.toLowerCase()}">
            <div class="flip-card-inner" id="${cardId}">
                <div class="flip-card-front" onclick="flipCard('${cardId}')">
                    ${coverImage ? 
                        `<img src="${coverImage}" 
                             alt="${coverAlt}" 
                             class="book-cover"
                             loading="lazy"
                             decoding="async"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                         <div class="cover-placeholder" style="display: none;" aria-hidden="true">
                            <div>Cover unavailable</div>
                            <div style="font-size: 12px; margin-top: 8px;">${title}</div>
                         </div>` :
                        `<div class="cover-placeholder" aria-hidden="true">
                            <div>Cover unavailable</div>
                            <div style="font-size: 12px; margin-top: 8px;">${title}</div>
                        </div>`
                    }
                    <div class="flip-instruction">
                        Click to view details
                        <button id="${flipButtonId}" 
                                class="sr-only" 
                                onclick="event.stopPropagation(); flipCard('${cardId}')"
                                aria-label="View details for ${title}">
                            View Details
                        </button>
                    </div>
                </div>
                <div class="flip-card-back" onclick="flipCard('${cardId}')">
                    <div class="book-info">
                        ${bookInfoHTML}
                    </div>
                    <div style="display: flex; flex-wrap: wrap; gap: 8px; align-items: center; justify-content: flex-start;">
                        ${permalink !== '#' ? 
                            `<a href="${permalink}" 
                               id="${catalogLinkId}"
                               class="book-link" 
                               target="_blank" 
                               rel="noopener noreferrer"
                               onclick="event.stopPropagation()"
                               aria-label="View ${title} in library catalog (opens in new tab)">
                                View in Catalog
                            </a>` : ''
                        }
                        <button id="${backFlipButtonId}" 
                                onclick="event.stopPropagation(); flipCard('${cardId}')"
                                style="background: #6b7280; color: white; border: none; padding: 8px 12px; border-radius: 6px; font-size: 12px; cursor: pointer; transition: background 0.2s;"
                                onmouseover="this.style.background='#4b5563'"
                                onmouseout="this.style.background='#6b7280'"
                                aria-label="Return to cover view for ${title}">
                            Back to Cover
                        </button>
                    </div>
                </div>
            </div>
        </article>
    `;
}

// Enhanced keyboard navigation handler
function handleGlobalKeydown(event) {
    // Handle global keyboard shortcuts
    if (event.altKey) {
        switch(event.key) {
            case 'f':
            case 'F':
                event.preventDefault();
                document.getElementById('searchInput')?.focus();
                announceToScreenReader('Search box focused');
                break;
            case 's':
            case 'S':
                event.preventDefault();
                document.getElementById('sortBy')?.focus();
                announceToScreenReader('Sort dropdown focused');
                break;
            case 'o':
            case 'O':
                event.preventDefault();
                document.getElementById('sortOrderBtn')?.focus();
                announceToScreenReader('Sort order button focused');
                break;
        }
    }
    
    // Handle escape key to clear search
    if (event.key === 'Escape') {
        const searchInput = document.getElementById('searchInput');
        if (searchInput && document.activeElement === searchInput && currentSearchTerm) {
            event.preventDefault();
            clearSearch();
        }
    }
    
    // Handle card navigation with arrow keys
    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {
        const focusedElement = document.activeElement;
        
        // Only handle arrow keys if we're on a card element or its children
        const cardElement = focusedElement.closest('.flip-card');
        if (!cardElement) return;
        
        event.preventDefault();
        
        const allCards = Array.from(document.querySelectorAll('.flip-card'));
        const currentIndex = allCards.indexOf(cardElement);
        
        let targetIndex = currentIndex;
        const cardsPerRow = getCardsPerRow();
        
        switch(event.key) {
            case 'ArrowLeft':
                targetIndex = Math.max(0, currentIndex - 1);
                break;
            case 'ArrowRight':
                targetIndex = Math.min(allCards.length - 1, currentIndex + 1);
                break;
            case 'ArrowUp':
                targetIndex = Math.max(0, currentIndex - cardsPerRow);
                break;
            case 'ArrowDown':
                targetIndex = Math.min(allCards.length - 1, currentIndex + cardsPerRow);
                break;
        }
        
        if (targetIndex !== currentIndex && allCards[targetIndex]) {
            focusCardElement(allCards[targetIndex], focusedElement);
        }
    }
}

// Calculate cards per row for navigation
function getCardsPerRow() {
    const container = document.getElementById('cardsContainer');
    if (!container) return 1;
    
    const cards = container.querySelectorAll('.flip-card');
    if (cards.length < 2) return 1;
    
    const firstCardRect = cards[0].getBoundingClientRect();
    const secondCardRect = cards[1].getBoundingClientRect();
    
    // If second card is on the same row (similar top position), count cards in that row
    if (Math.abs(firstCardRect.top - secondCardRect.top) < 10) {
        let cardsInRow = 1;
        for (let i = 1; i < cards.length; i++) {
            const cardRect = cards[i].getBoundingClientRect();
            if (Math.abs(cardRect.top - firstCardRect.top) < 10) {
                cardsInRow++;
            } else {
                break;
            }
        }
        return cardsInRow;
    }
    
    return 1; // Single column layout
}

// Focus the appropriate element within a card
function focusCardElement(card, previousElement) {
    const isFlipped = card.classList.contains('flipped');
    
    if (isFlipped) {
        // Card is showing back - focus catalog link if available, otherwise flip button
        const catalogLink = card.querySelector('.book-link');
        const backFlipButton = card.querySelector('[id^="back-flip-btn-"]');
        
        if (catalogLink && previousElement && previousElement.classList.contains('book-link')) {
            catalogLink.focus();
        } else if (backFlipButton) {
            backFlipButton.focus();
        } else if (catalogLink) {
            catalogLink.focus();
        }
    } else {
        // Card is showing front - focus flip button
        const flipButton = card.querySelector('[id^="flip-btn-"]');
        if (flipButton) {
            flipButton.focus();
        }
    }
}

// Sanitize text to prevent XSS
function sanitizeText(text) {
    if (!text) return '';
    return text.toString()
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;');
}

function flipCard(cardId) {
    const cardElement = document.getElementById(cardId)?.parentElement;
    if (!cardElement) return;
    
    const isCurrentlyFlipped = cardElement.classList.contains('flipped');
    cardElement.classList.toggle('flipped');
    
    const title = cardElement.querySelector('.book-title')?.textContent || 'Book';
    const action = !isCurrentlyFlipped ? 'Details view opened' : 'Returned to cover view';
    
    // Focus management after flip
    setTimeout(() => {
        if (!isCurrentlyFlipped) {
            // Flipped to back - focus the catalog link if available, otherwise the back button
            const catalogLink = cardElement.querySelector('.book-link');
            const backButton = cardElement.querySelector('[id^="back-flip-btn-"]');
            
            if (catalogLink) {
                catalogLink.focus();
            } else if (backButton) {
                backButton.focus();
            }
        } else {
            // Flipped to front - focus the flip button
            const flipButton = cardElement.querySelector('[id^="flip-btn-"]');
            if (flipButton) {
                flipButton.focus();
            }
        }
    }, 300); // Wait for flip animation
    
    announceToScreenReader(`${title}: ${action}`);
}

function displayBooks() {
    const container = document.getElementById('cardsContainer');
    
    if (filteredBookData.length === 0) {
        const message = currentSearchTerm ? 
            `No books found matching "${currentSearchTerm}"` : 
            'No reserves available';
        container.innerHTML = `<div class="loading" role="status" aria-live="polite">${message}</div>`;
        return;
    }
    
    const sortedBooks = getSortedBooks();
    renderAllBooks(sortedBooks, container);
}

function renderAllBooks(books, container) {
    const cardsHTML = books.map((book, index) => createCard(book, index)).join('');
    container.innerHTML = cardsHTML;
    
    const searchDesc = currentSearchTerm ? ` matching "${currentSearchTerm}"` : '';
    announceToScreenReader(`${books.length} reserve cards displayed${searchDesc}, sorted ${getSortDescription()}`);
}

function getSortedBooks() {
    return [...filteredBookData].sort((a, b) => {
        let valueA, valueB;
        
        switch (currentSortBy) {
            case 'title':
                valueA = (a.title || 'Untitled').toLowerCase().trim();
                valueB = (b.title || 'Untitled').toLowerCase().trim();
                break;
            case 'author':
                valueA = (a.author || 'Unknown Author').toLowerCase().trim();
                valueB = (b.author || 'Unknown Author').toLowerCase().trim();
                break;
            case 'course':
                valueA = (a.course || 'No Course').toLowerCase().trim();
                valueB = (b.course || 'No Course').toLowerCase().trim();
                break;
            case 'date':
                valueA = extractYear(a.date);
                valueB = extractYear(b.date);
                break;
            default:
                valueA = (a.title || 'Untitled').toLowerCase().trim();
                valueB = (b.title || 'Untitled').toLowerCase().trim();
        }
        
        let comparison;
        if (currentSortBy === 'date') {
            comparison = valueA - valueB;
        } else {
            comparison = valueA.localeCompare(valueB, undefined, { 
                numeric: true, 
                sensitivity: 'base' 
            });
        }
        
        return currentSortOrder === 'desc' ? -comparison : comparison;
    });
}

function extractYear(dateString) {
    if (!dateString) return 0;
    
    const cleaned = dateString.toString().trim();
    const yearMatch = cleaned.match(/\b(19|20)\d{2}\b/);
    return yearMatch ? parseInt(yearMatch[0]) : 0;
}

function getSortDescription() {
    const criteria = currentSortBy === 'date' ? 'publication date' : currentSortBy;
    const order = currentSortOrder === 'asc' ? 
        (currentSortBy === 'date' ? 'oldest to newest' : 'A to Z') : 
        (currentSortBy === 'date' ? 'newest to oldest' : 'Z to A');
    return `by ${criteria}, ${order}`;
}

function applySorting() {
    const sortSelect = document.getElementById('sortBy');
    if (!sortSelect) return;
    
    currentSortBy = sortSelect.value;
    updateSortOrderButton();
    debouncedRender();
    
    announceToScreenReader(`Sorting changed to ${getSortDescription()}`);
}

function toggleSortOrder() {
    currentSortOrder = currentSortOrder === 'asc' ? 'desc' : 'asc';
    updateSortOrderButton();
    debouncedRender();
    
    announceToScreenReader(`Sort order changed to ${getSortDescription()}`);
}

function updateSortOrderButton() {
    const button = document.getElementById('sortOrderBtn');
    if (!button) return;
    
    let buttonText, ariaLabel;
    
    if (currentSortBy === 'date') {
        buttonText = currentSortOrder === 'asc' ? 'Oldest First' : 'Newest First';
        ariaLabel = `Current order: ${currentSortOrder === 'asc' ? 'oldest to newest' : 'newest to oldest'}. Click to reverse order.`;
    } else {
        buttonText = currentSortOrder === 'asc' ? 'A → Z' : 'Z → A';
        ariaLabel = `Current order: ${currentSortOrder === 'asc' ? 'A to Z' : 'Z to A'}. Click to reverse order.`;
    }
    
    button.textContent = buttonText;
    button.setAttribute('aria-label', ariaLabel);
    button.classList.toggle('desc', currentSortOrder === 'desc');
}

function announceToScreenReader(message, priority = 'polite') {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', priority);
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = message;
    
    document.body.appendChild(announcement);
    
    setTimeout(() => {
        if (document.body.contains(announcement)) {
            document.body.removeChild(announcement);
        }
    }, 3000);
}

function handleResize() {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
        if (filteredBookData.length > 0) {
            const container = document.getElementById('cardsContainer');
            if (container && container.children.length !== filteredBookData.length) {
                debouncedRender(200);
            }
        }
    }, 150);
}

function handleVisibilityChange() {
    if (!document.hidden && bookData.length === 0 && !isLoading) {
        console.log('Page visible and no data - retrying load');
        loadBookData();
    }
}

function initializeApp() {
    console.log('Initializing Reserves Collection App with Search');
    
    updateSortOrderButton();
    updateClearButton();
    loadBookData();
    
    // Add global keyboard event listener
    document.addEventListener('keydown', handleGlobalKeydown, { passive: false });
    
    window.addEventListener('resize', handleResize, { passive: true });
    document.addEventListener('visibilitychange', handleVisibilityChange, { passive: true });
    
    // Add keyboard navigation instructions
    const instructions = document.createElement('div');
    instructions.className = 'sr-only';
    instructions.setAttribute('aria-live', 'polite');
    instructions.textContent = 'Use arrow keys to navigate between cards. Alt+F to focus search, Alt+S to focus sort dropdown, Alt+O to focus sort order button. Press Escape to clear search.';
    document.body.appendChild(instructions);
    
    console.log('Reserves Collection initialized successfully with search and enhanced keyboard navigation');
    
    // Log current display configuration
    console.log('Display configuration:', DISPLAY_CONFIG);
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}

// Cleanup function
window.addEventListener('beforeunload', () => {
    clearTimeout(renderTimeout);
    clearTimeout(resizeTimeout);
    clearTimeout(searchTimeout);
    document.removeEventListener('keydown', handleGlobalKeydown);
});
</script>
